/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pythonprogramtester;

import java.awt.Image;
import java.io.File;
import java.awt.Desktop;
import java.net.URI;
import java.net.URISyntaxException;
import java.io.IOException;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Willhoft
 */
public class PythonProgramTesterGUI extends javax.swing.JFrame {

    /**
     * Creates new form pythonprogramtesterGUI
     */
    public PythonProgramTesterGUI() {
        initComponents();

        settings = new ProgramSettings();
        settings.saveSettings();

        testCaseField.setText(settings.getLastTestCase());
        testingPathField.setText(settings.getLastTestingPath());
        textSelected = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testCaseBrowseButton = new javax.swing.JButton();
        testCaseLabel = new javax.swing.JLabel();
        testingPathLabel = new javax.swing.JLabel();
        testingPathBrowseButton = new javax.swing.JButton();
        testCaseField = new javax.swing.JTextField();
        testingPathField = new javax.swing.JTextField();
        runTestsButton = new javax.swing.JButton();
        removeBlankLinesCheckBox = new javax.swing.JCheckBox();
        verboseCheckbox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        resultsFormatComboBox = new javax.swing.JComboBox();
        debugCheckBox = new javax.swing.JCheckBox();
        editSettingsButton = new javax.swing.JButton();
        ignoreSpaCapCheckBox = new javax.swing.JCheckBox();
        idleButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Python Program Tester");

        testCaseBrowseButton.setText("Browse");
        testCaseBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testCaseBrowseButtonActionPerformed(evt);
            }
        });

        testCaseLabel.setText("Test Case:");

        testingPathLabel.setText("Testing Path:");

        testingPathBrowseButton.setText("Browse");
        testingPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingPathBrowseButtonActionPerformed(evt);
            }
        });

        testCaseField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        testCaseField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testCaseFieldMouseClicked(evt);
            }
        });

        testingPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testingPathFieldActionPerformed(evt);
            }
        });

        runTestsButton.setText("Run Tests");
        runTestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runTestsButtonActionPerformed(evt);
            }
        });

        removeBlankLinesCheckBox.setText("Ignore Blank Lines");

        verboseCheckbox.setText("Verbose");
        verboseCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verboseCheckboxActionPerformed(evt);
            }
        });

        resultsTextArea.setColumns(20);
        resultsTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        resultsTextArea.setRows(5);
        resultsTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTextAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultsTextArea);

        resultsFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Side by Side" }));
        resultsFormatComboBox.setSelectedIndex(1);

        debugCheckBox.setText("Debug");

        editSettingsButton.setText("Edit Settings");
        editSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSettingsButtonActionPerformed(evt);
            }
        });

        ignoreSpaCapCheckBox.setText("Ignore Spacing / Capitalization");

        idleButton.setText("IDLE");
        idleButton.setToolTipText("Open all .py files in testing path");
        idleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idleButtonActionPerformed(evt);
            }
        });

        jButton1.setText("GitHub.com");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(runTestsButton)
                        .addGap(18, 18, 18)
                        .addComponent(resultsFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeBlankLinesCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(ignoreSpaCapCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(verboseCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(debugCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(idleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(editSettingsButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(testCaseLabel)
                            .addComponent(testingPathLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testingPathField)
                            .addComponent(testCaseField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(testCaseBrowseButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(testingPathBrowseButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testCaseBrowseButton)
                    .addComponent(testCaseLabel)
                    .addComponent(testCaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(testingPathLabel)
                        .addComponent(testingPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(testingPathBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(runTestsButton)
                        .addComponent(removeBlankLinesCheckBox)
                        .addComponent(resultsFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ignoreSpaCapCheckBox)
                        .addComponent(verboseCheckbox)
                        .addComponent(debugCheckBox)
                        .addComponent(idleButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editSettingsButton)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void testCaseBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testCaseBrowseButtonActionPerformed
        String path = testCaseField.getText().replace("\\","/");
        String subPath = path;
        
        if (path.equals("")) {
            path = ".";
        }
        else {
            File test = new File(path);
            int i = 0;                  // This can be optional; we could count how many times we
                                        // modify the path and exit the loop. See if block below
            while (!test.exists()) {
                int lastSlash = path.lastIndexOf('/'); // We need this index to 
                                                          // move back one level in the file path
                
                path = path.substring(0, lastSlash); // Make a new path which is one level higher
                test = new File(path);
                
                if( i == 3 ) break;
                i++;
            }
        }
        JFileChooser chooser = new JFileChooser(path);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File inputFile = chooser.getSelectedFile();
            path = inputFile.getPath().replace("\\","/");
            
            int lastSlash = path.lastIndexOf('/');
            //Unsure of the necessity of the if-statement check...
            //Shorter means: subPath = path.substring(0, path.lastIndexOf('\\'));
                if (lastSlash > 0) {
                    subPath = path.substring(0, lastSlash);
                }
                testCaseField.setText(path);
                
            // Only do the following if the test case path has changed
            if( !testingPathField.getText().equals( subPath ) ) {
                
                //Sets text labels for the option dialog buttons
                Object[] options = {"Yes", "No", "Change and Run"};
                
                //Adds and scales a file folder icon to replace the default icon
                ImageIcon icon = new ImageIcon(getClass().getResource("/Icons/File Folder Icon.png"));
                Image image = icon.getImage(); 
                Image newImage = image.getScaledInstance(100, 100,  java.awt.Image.SCALE_SMOOTH);  
                icon = new ImageIcon(newImage);
          
                int sameFolder = JOptionPane.showOptionDialog(this,"Set testing path to same folder?",
                        "Change Testing Path", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, icon, options, options[0]);
           
                if( sameFolder != JOptionPane.NO_OPTION) {
                    testingPathField.setText(subPath);
                    if( sameFolder == JOptionPane.CANCEL_OPTION ) {
                        runTests();
                    }
                }
            }
        }
    }//GEN-LAST:event_testCaseBrowseButtonActionPerformed

    private void verboseCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verboseCheckboxActionPerformed
        PythonExecutor.setVerboseMode(verboseCheckbox.isSelected());
    }//GEN-LAST:event_verboseCheckboxActionPerformed

    private void testingPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingPathBrowseButtonActionPerformed
        String path = testingPathField.getText().replace("\\","/");
        
        if (path.equals("")) {
            path = ".";
        }
         else {
            File test = new File(path);
            int i = 0;                  // This can be optional; we could count how many times we
                                        // modify the path and exit the loop. See if block below
            while (!test.exists()) {
                int lastSlash = path.lastIndexOf('/'); // We need this index to 
                                                          // move back one level in the file path
                
                path = path.substring(0, lastSlash); // Make a new path which is one level higher
                test = new File(path);
                
                if( i == 3 ) break;
                i++;
            }
        }
        
        JFileChooser chooser = new JFileChooser(path);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            path = chooser.getSelectedFile().toString();
            File filePath = new File( path );
            if( filePath.isFile() )
            {
                path = filePath.getParent();
            }
            testingPathField.setText(path.replace("\\","/") );
        }
       
    }//GEN-LAST:event_testingPathBrowseButtonActionPerformed

    private void testingPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testingPathFieldActionPerformed


    }//GEN-LAST:event_testingPathFieldActionPerformed

    private void runTestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runTestsButtonActionPerformed
        runTests();
    }//GEN-LAST:event_runTestsButtonActionPerformed

    private void editSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSettingsButtonActionPerformed
        // TODO: handle what happens if can't load or save settings
        settings.loadSettings();
        SettingsDialog settingsEditor = new SettingsDialog(this, true, settings);
        settingsEditor.setVisible(true);
        settings.saveSettings();
    }//GEN-LAST:event_editSettingsButtonActionPerformed

    private void resultsTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTextAreaMouseClicked
        if( evt.getButton() == 1 ) {   
            try{
                String text = resultsTextArea.getText();
                int caret = resultsTextArea.getCaretPosition();
                if( caret > text.lastIndexOf( "Run completed!" ) + 14 && text.lastIndexOf( "Run completed!" ) > -1){
                    // TODO:  Need a better way to do this, such as search backwards for
                    //        the first character that can't be part of filename
                    int start = Math.max( text.lastIndexOf( " ", caret ) + 1,
                                          Math.max( text.lastIndexOf( "(", caret ) + 1,
                                                    text.lastIndexOf( "\n", caret ) + 1 ) );
                    
                    int end = text.indexOf( ".py", caret ) + 3;

                    String fileName = text.substring( start, end );

                    String path = testingPathField.getText();
                    CodeViewer cv = new CodeViewer();
                    cv.openCode( path + "/" + fileName, this );
                }
            }catch(StringIndexOutOfBoundsException e){
                
            }

// RGW: This did work at one point, but I switched back to using the CodeViewer above            
//            try
//            {
//                System.out.println( path + "/" + fileName );
//                java.awt.Desktop.getDesktop().edit( new File( path + "/" + fileName ) );
//                
//            }
//            catch( Exception ex )
//            {
//                ex.printStackTrace();
//            }
        }
    }//GEN-LAST:event_resultsTextAreaMouseClicked

    private void idleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idleButtonActionPerformed
        // Bring up an IDLE window for each of the programs in the user folder
        
        String path = testingPathField.getText();
        List<String> userFiles = FileNameMapper.getFiles( path + "/", ".py" );
        
        for( String file : userFiles )
        {
            CodeViewer cv = new CodeViewer();
            cv.openCode( path + "/" + file, this );
        }
    }//GEN-LAST:event_idleButtonActionPerformed

    private void testCaseFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testCaseFieldMouseClicked
        textSelected = !textSelected;
        if( textSelected )
            testCaseField.selectAll();
    }//GEN-LAST:event_testCaseFieldMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Button that sends you to GitHub website:
        try {
            Desktop d = Desktop.getDesktop();
            d.browse(new URI("https://github.com"));
        } catch ( IOException e) {
            e.printStackTrace();
        } catch ( URISyntaxException u) {
            u.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public boolean runTests() {
        String test = testCaseField.getText().replace("\\","/");
        settings.setLastTestCase(test);

        String path = testingPathField.getText().replace("\\","/");
        settings.setLastTestingPath(path);

        settings.saveSettings();

        try {
            resultsTextArea.setText("");
            resultsTextArea.update(resultsTextArea.getGraphics());
            String resultsFormat = resultsFormatComboBox.getSelectedItem().toString();
            boolean ignoreSpaCap = ignoreSpaCapCheckBox.isSelected();
            boolean removeBlankLines = removeBlankLinesCheckBox.isSelected();
            boolean debug = debugCheckBox.isSelected();
            // System.out.println( ">>" + resultsFormat + "<<" );

            PythonProgramValidator validator = new PythonProgramValidator( test );
            boolean isValid = validator.isValid();
            if( !isValid ) {
                resultsTextArea.append( "Tag in error: "+validator.getTag()+"\n" );
                resultsTextArea.append( validator.getException() );
            }
            else {
            
            //Ty Carpenter Issue #39
            //Created Preferences variable to be stored as a single parameter for PythonProgramTester.runTest()
            Preferences pref = new Preferences(test, path, resultsFormat, ignoreSpaCap, removeBlankLines, debug, resultsTextArea, settings);
            
            
            PythonProgramTester.runTests(pref);
            } 
        }catch ( InvalidTagFormatException e ){
            resultsTextArea.append( e.getMessage() );
        }catch( IOException ex ){
                resultsTextArea.append( "File not found: " + ex.getMessage() );
        }catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException( "Error in runTests: " + ex.getMessage() );
            // System.exit(1);
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PythonProgramTesterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PythonProgramTesterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PythonProgramTesterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PythonProgramTesterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    TextFileWriter flightRecorder = 
                        new TextFileWriter( "flight-recorder.txt" );
                    try {
                        flightRecorder.writeLine( "Started");
                        new PythonProgramTesterGUI().setVisible(true);
                    }
                    catch( Exception ex ) {
                        flightRecorder.writeLine( "Error" );
                    }
                    flightRecorder.writeLine( "Done" );
                    flightRecorder.close();
                }
                catch( Exception junk ) {
                    // Nothing we can do        
                }
            }
        });
    }
    // Instance Variables
    private ProgramSettings settings;
    private boolean textSelected; 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox debugCheckBox;
    private javax.swing.JButton editSettingsButton;
    private javax.swing.JButton idleButton;
    private javax.swing.JCheckBox ignoreSpaCapCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox removeBlankLinesCheckBox;
    private javax.swing.JComboBox resultsFormatComboBox;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JButton runTestsButton;
    private javax.swing.JButton testCaseBrowseButton;
    private javax.swing.JTextField testCaseField;
    private javax.swing.JLabel testCaseLabel;
    private javax.swing.JButton testingPathBrowseButton;
    private javax.swing.JTextField testingPathField;
    private javax.swing.JLabel testingPathLabel;
    private javax.swing.JCheckBox verboseCheckbox;
    // End of variables declaration//GEN-END:variables
}
